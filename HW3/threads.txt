gcc ... -pthread
----------------------------------------------------
Creating Threads

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define NUM_THREADS 5

pthread_t threads[NUM_THREADS];
int i;

void *print_hello(void * tid)
{
  printf ("Hello from thread %d\n", tid);
  pthread_exit(NULL);
}

int main(int argc, char *argv[])
{
  for(i=0; i < NUM_THREADS; i++) {
    pthread_create(&threads[i], NULL, print_hello, (void *) i);
  }
  for(i=0; i < NUM_THREADS; i++) {
    pthread_join(threads[i], NULL);
  }
  printf ("Good Bye\n");
  exit(0);
}

----------------------------------------------------
Process Jobs from the Queue

#include <malloc.h>

struct job {
	/* Link field for linked list. */
	struct job* next;
	/* Other fields describing work to be done... */
};

/* A linked list of pending jobs. */
struct job* job_queue;

/* Process queued jobs until the queue is empty. */

void* thread_function (void* arg)
{
	while (job_queue != NULL) {
		/* Get the next available job. */
		struct job* next_job = job_queue

		/* Remove this job from the list. */
		job_queue = job_queue->next;

		/* Carry out the work. */
		process_job (next_job);

		/* Clean up. */
		free (next_job);
	}

return NULL;

}


void enqueue_job (struct job* new_job)
{
	new_job->next = job_queue;
	job_queue = new_job;
}

Problems:
If one thread stores the pointer to the job object in next_job.
At this point, OS happens to interrupt the thread and schedule another thread.
The other thread also assigns the same job pointer to next_job.
We now have two threads executing the same job.

If one thread will unlink the last job object from the queue, leaving job_queue
containing null.
When the other thread evaluates job_queue->next, a segmentation fault will
result.

Solution:
Let only one thread access the queue of jobs at a time.
A mutex (MUTual EXclusion) is a lock provided by Linux.

To create and initialize a mutex:
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

A thread may attempt to lock a mutex by calling pthread_mutex_lock.
A call to pthread_mutex_unlock unlocks a mutex.
----------------------------------------------------
Process Jobs from the Queue, Protected by a Mutex

#include <malloc.h>
#include <pthread.h>

struct job {
	/* Link field for linked list. */
	struct job* next;
	/* Other fields describing work to be done... */
};

/* A linked list of pending jobs. */
struct job* job_queue;

/* A mutex protecting job_queue. */
pthread_mutex_t job_queue_mutex = PTHREAD_MUTEX_INITIALIZER;

/* Process queued jobs until the queue is empty. */
void* thread_function (void* arg)
{
	while (1) {
		struct job* next_job;

		/* Lock the mutex on the job queue. */
		pthread_mutex_lock (&job_queue_mutex);

		/* Now it's safe to check if the queue is empty. */
		if (job_queue == NULL)
			next_job = NULL;
		else {
			/* Get the next available job. */
			next_job = job_queue;
			/* Remove this job from the list. */
			job_queue = job_queue->next;
		}

		/* Unlock the mutex on the job. */
		pthread_mutex_unlock (&job_queue_mutex);

		/* Was the queue empty? If so, try again. */
		if (next_job == NULL)
			break;
		/* Carry out the work. */
		process_job (next_job);
		/* Clean up. */
		free (next_job);
	}
	return NULL;
}

void enqueue_job (struct job* new_job)
{
	pthread_mutex_lock (&job_queue_mutex);
	new_job->next = job_queue;
	job_queue = new_job;
	pthread_mutex_unlock (&job_queue_mutex);
}

Problem:
Thread carries out the next job until no jobs are left and then waits in a loop.

Solution:
A mechanism for blocking the threads when the queue empties until
new jobs become available.
A semaphore can be used to synchronize multiple threads.

----------------------------------------------------
Job Queue Controlled by a Semaphore

#include <malloc.h>
#include <pthread.h>
#include <semaphore.h>

struct job {
	/* Link field for linked list. */
	struct job* next;
	/* Other fields describing work to be done... */
};

/* A linked list of pending jobs. */
struct job* job_queue;

/* A mutex protecting job_queue. */
pthread_mutex_t job_queue_mutex = PTHREAD_MUTEX_INITIALIZER;

/* A semaphore counting the number of jobs in the queue. */
sem_t job_queue_count;

/* Perform one-time initialization of the job queue. */
void initialize_job_queue ()
{
	/* The queue is initially empty. */
	job_queue = NULL;
	/* Initialize the semaphore which counts jobs in the queue to zero */
	sem_init (&job_queue_count, 0);
}

/* Process queued jobs until the queue is empty. */
void* thread_function (void* arg)
{
	while (1) {
		struct job* next_job;

		/* Wait on the job queue semaphore. If its value is positive,
		indicating that the queue is not empty, decrement the count by 1.
		If the queue is empty, block until a new job is enqueued. */
		sem_wait (&job_queue_count);

		/* Lock the mutex on the job queue. */
		pthread_mutex_lock (&job_queue_mutex);

		/* Because of the semaphore, we know the queue is not empty.
 		Get the next available job. */
		next_job = job_queue;

		/* Remove this job from the list. */
		job_queue = job_queue->next;

		/* Unlock the mutex on the job queue because we're done with the
		queue for now. */
		pthread_mutex_unlock (&job_queue_mutex);

		/* Carry out the work. */
		process_job (next_job);

		/* Clean up. */
		free (next_job);
	}
return NULL;
}

/* Add a new job to the front of the job queue. */
void enqueue_job (/* Pass job-specific data here... */)
{
	struct job* new_job;

	/* Allocate a new job object. */
	new_job = (struct job*) malloc (sizeof (struct job));

	/* Set the other fields of the job struct here... */

	/* Lock the mutex on the job queue before accessing it. */
	pthread_mutex_lock (&job_queue_mutex);

	/* Place the new job at the head of the queue. */
	new_job->next = job_queue;
	job_queue = new_job;

	/* Post to the semaphore to indicate that another job is available.
	If threads are blocked, waiting on the semaphore, one will become
	unblocked so it can process the job. */
	sem_post (&job_queue_count);

	/* Unlock the job queue mutex. */
	pthread_mutex_unlock (&job_queue_mutex);
}
----------------------------------------------------